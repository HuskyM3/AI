
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQVIrightIMPLIESleftANDORleftNOTleftFORALLEXISTSAND COMMA EQ EQVI EXISTS FORALL ID IMPLIES LPAREN NEQ NOT OR RPARENspec : spec : boolexpr specboolexpr : FORALL ID uboolexpruboolexpr : FORALL ID uboolexpruboolexpr : LPAREN boolexpr RPARENuboolexpr : atomboolexpr : EXISTS ID uboolexpruboolexpr : EXISTS ID uboolexprboolexpr : boolexpr AND boolexpr\n                | boolexpr OR boolexpr\n                | boolexpr IMPLIES boolexpr\n                | boolexpr EQVI boolexprboolexpr : NOT boolexprboolexpr : term EQ termboolexpr : term NEQ termboolexpr : atomboolexpr : LPAREN boolexpr RPARENtermlist : term COMMA termlisttermlist : termterm : IDatom : ID LPAREN termlist RPAREN'
    
_lr_action_items = {'$end':([0,1,2,8,10,18,22,23,24,25,28,30,32,35,36,37,38,42,44,45,46,],[-1,0,-1,-16,-2,-13,-9,-10,-11,-12,-3,-6,-20,-7,-14,-15,-17,-21,-4,-5,-8,]),'FORALL':([0,2,6,8,9,11,12,13,14,15,17,18,22,23,24,25,28,29,30,32,35,36,37,38,39,41,42,44,45,46,],[3,3,3,-16,3,3,3,3,3,26,26,-13,-9,-10,-11,-12,-3,3,-6,-20,-7,-14,-15,-17,26,26,-21,-4,-5,-8,]),'EXISTS':([0,2,6,8,9,11,12,13,14,15,17,18,22,23,24,25,28,29,30,32,35,36,37,38,39,41,42,44,45,46,],[5,5,5,-16,5,5,5,5,5,31,31,-13,-9,-10,-11,-12,-3,5,-6,-20,-7,-14,-15,-17,31,31,-21,-4,-5,-8,]),'NOT':([0,2,6,8,9,11,12,13,14,18,22,23,24,25,28,29,30,32,35,36,37,38,42,44,45,46,],[6,6,6,-16,6,6,6,6,6,-13,-9,-10,-11,-12,-3,6,-6,-20,-7,-14,-15,-17,-21,-4,-5,-8,]),'LPAREN':([0,2,4,6,8,9,11,12,13,14,15,17,18,22,23,24,25,27,28,29,30,32,35,36,37,38,39,41,42,44,45,46,],[9,9,16,9,-16,9,9,9,9,9,29,29,-13,-9,-10,-11,-12,16,-3,9,-6,-20,-7,-14,-15,-17,29,29,-21,-4,-5,-8,]),'ID':([0,2,3,5,6,8,9,11,12,13,14,15,16,17,18,19,20,22,23,24,25,26,28,29,30,31,32,35,36,37,38,39,41,42,43,44,45,46,],[4,4,15,17,4,-16,4,4,4,4,4,27,32,27,-13,32,32,-9,-10,-11,-12,39,-3,4,-6,41,-20,-7,-14,-15,-17,27,27,-21,32,-4,-5,-8,]),'AND':([2,8,18,21,22,23,24,25,28,30,32,35,36,37,38,40,42,44,45,46,],[11,-16,-13,11,-9,-10,11,11,-3,-6,-20,-7,-14,-15,-17,11,-21,-4,-5,-8,]),'OR':([2,8,18,21,22,23,24,25,28,30,32,35,36,37,38,40,42,44,45,46,],[12,-16,-13,12,-9,-10,12,12,-3,-6,-20,-7,-14,-15,-17,12,-21,-4,-5,-8,]),'IMPLIES':([2,8,18,21,22,23,24,25,28,30,32,35,36,37,38,40,42,44,45,46,],[13,-16,-13,13,-9,-10,13,13,-3,-6,-20,-7,-14,-15,-17,13,-21,-4,-5,-8,]),'EQVI':([2,8,18,21,22,23,24,25,28,30,32,35,36,37,38,40,42,44,45,46,],[14,-16,-13,14,-9,-10,-11,14,-3,-6,-20,-7,-14,-15,-17,14,-21,-4,-5,-8,]),'EQ':([4,7,],[-20,19,]),'NEQ':([4,7,],[-20,20,]),'RPAREN':([8,18,21,22,23,24,25,28,30,32,33,34,35,36,37,38,40,42,44,45,46,47,],[-16,-13,38,-9,-10,-11,-12,-3,-6,-20,42,-19,-7,-14,-15,-17,45,-21,-4,-5,-8,-18,]),'COMMA':([32,34,],[-20,43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'spec':([0,2,],[1,10,]),'boolexpr':([0,2,6,9,11,12,13,14,29,],[2,2,18,21,22,23,24,25,40,]),'term':([0,2,6,9,11,12,13,14,16,19,20,29,43,],[7,7,7,7,7,7,7,7,34,36,37,7,34,]),'atom':([0,2,6,9,11,12,13,14,15,17,29,39,41,],[8,8,8,8,8,8,8,8,30,30,8,30,30,]),'uboolexpr':([15,17,39,41,],[28,35,44,46,]),'termlist':([16,43,],[33,47,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> spec","S'",1,None,None,None),
  ('spec -> <empty>','spec',0,'p_spec_0','prparse.py',141),
  ('spec -> boolexpr spec','spec',2,'p_spec','prparse.py',145),
  ('boolexpr -> FORALL ID uboolexpr','boolexpr',3,'p_forall_quant','prparse.py',151),
  ('uboolexpr -> FORALL ID uboolexpr','uboolexpr',3,'p_u_forall_quant','prparse.py',155),
  ('uboolexpr -> LPAREN boolexpr RPAREN','uboolexpr',3,'p_uboolexpr_parent','prparse.py',159),
  ('uboolexpr -> atom','uboolexpr',1,'p_uboolexpr_atom','prparse.py',163),
  ('boolexpr -> EXISTS ID uboolexpr','boolexpr',3,'p_exists_quant','prparse.py',175),
  ('uboolexpr -> EXISTS ID uboolexpr','uboolexpr',3,'p_u_exists_quant','prparse.py',179),
  ('boolexpr -> boolexpr AND boolexpr','boolexpr',3,'p_boolexpr_binop','prparse.py',183),
  ('boolexpr -> boolexpr OR boolexpr','boolexpr',3,'p_boolexpr_binop','prparse.py',184),
  ('boolexpr -> boolexpr IMPLIES boolexpr','boolexpr',3,'p_boolexpr_binop','prparse.py',185),
  ('boolexpr -> boolexpr EQVI boolexpr','boolexpr',3,'p_boolexpr_binop','prparse.py',186),
  ('boolexpr -> NOT boolexpr','boolexpr',2,'p_boolexpr_unop','prparse.py',200),
  ('boolexpr -> term EQ term','boolexpr',3,'p_boolexpr_eq','prparse.py',204),
  ('boolexpr -> term NEQ term','boolexpr',3,'p_boolexpr_neq','prparse.py',208),
  ('boolexpr -> atom','boolexpr',1,'p_boolexpr_atom','prparse.py',212),
  ('boolexpr -> LPAREN boolexpr RPAREN','boolexpr',3,'p_boolexpr_parentheses','prparse.py',224),
  ('termlist -> term COMMA termlist','termlist',3,'p_termlistN','prparse.py',230),
  ('termlist -> term','termlist',1,'p_termlist1','prparse.py',234),
  ('term -> ID','term',1,'p_term','prparse.py',238),
  ('atom -> ID LPAREN termlist RPAREN','atom',4,'p_atom','prparse.py',249),
]
